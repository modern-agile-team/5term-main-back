name: 5term-main

on:
  push:
    branches: ['feature/docker']

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: docker image build
        run: docker build -t nest .

      - name: Build Docker Image
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nest

      - name: Clean AWS Credentials
        run: |
          unset AWS_DEFAULT_REGION
          unset AWS_REGION
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            sudo docker stop nest-container || true  # 이 줄을 추가하여 컨테이너를 중지하도록 시도하고 에러가 발생해도 계속 실행합니다.
            sudo docker rm nest-container || true    # 이 줄을 추가하여 컨테이너를 제거하도록 시도하고 에러가 발생해도 계속 실행합니다.
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nest:latest   # 이 줄을 추가하여 최신 이미지를 먼저 가져옵니다.
            sudo docker run -it -d -p 3000:3000 --name nest-container ${{ secrets.DOCKERHUB_USERNAME }}/nest:latest  # 가져온 이미지로 컨테이너를 실행합니다.
